[gd_scene load_steps=7 format=3 uid="uid://djh6xgo1xqdoq"]

[ext_resource type="PackedScene" uid="uid://3gn565r6hae0" path="res://files/scenes/objects/Tools/DeleteTool/DeleteTool.tscn" id="1_t4gsu"]
[ext_resource type="Script" uid="uid://deuf0537dv7wi" path="res://files/scenes/objects/components/BaseComponent/BaseComponentScript.gd" id="3_qaqau"]
[ext_resource type="Texture2D" uid="uid://b66wowglfge7a" path="res://files/sprites/exported/base_comp.png" id="4_4paqi"]

[sub_resource type="GDScript" id="GDScript_y32ns"]
resource_name = "node2d"
script/source = "extends Node2D

func _process(_delta: float) -> void:
	pass
func _input(event: InputEvent) -> void:
	if event is InputEventKey and event.pressed and event.keycode == KEY_W:
		add_wire()

var times_spawned = 0
func add_wire():
	times_spawned += 1
	var wire = Wire_cb.new()
	wire.type_of_wire = Wire_cb.WireTypeEnum.NEUTRAL
	wire.position = get_global_mouse_position().snapped(Vector2(90,90))
	wire.can_drag = true
	wire.name = \"Wire_CB\" + str(times_spawned)
	add_child(wire)

#var _line:Line2D
#var _segments:Node2D
#var _loops:Node2D
#
#func _ready() -> void:
		#_line = Line2D.new()
		#_line.name = \"_line\"
		#add_child(_line)
		#_segments = Node2D.new()
		#_segments.name = \"_segments\"
		#add_child(_segments)
		#_loops = Node2D.new()
		#_loops.name = \"_loops\"
		#add_child(_loops)
#
#func _physics_process(_delta:float) -> void:
		#if Input.is_action_pressed(\"left_click\"):
				#add_position(get_global_mouse_position())
		#if Input.is_action_just_released(\"left_click\"):
				#total_purge()
#
#var _points:PackedVector2Array = PackedVector2Array()
#var _max_points := 30
#var _max_distance := 20
#
#func add_position(pos:Vector2) -> void:
		#var point_count := _points.size()
		#if point_count == 0:
				#_points.append(pos)
				#_points.append(pos)
				#add_segment(pos, pos)
		#elif point_count == 1:
				#_points.append(pos)
				#add_segment(_points[-2], pos)
		#elif point_count > _max_points:
				#purge(point_count - _max_points)
		#else:
				#if _points[-2].distance_to(pos) > _max_distance:
						#_points.append(pos)
						#add_segment(_points[-2], pos)
				#else:
						#_points[-1] = pos
						#change_segment(_points[-2], pos)
#
		#_line.points = _points
		#process_loop()
#
#var _width := 5
#
#func add_segment(start:Vector2, end:Vector2) -> void:
		#var points := rotated_rectangle_points(start, end, _width)
		#var segment := Area2D.new()
		#var collision := create_collision_polygon(points)
		#segment.add_child(collision)
		#_segments.add_child(segment)
#
#func change_segment(start:Vector2, end:Vector2) -> void:
		#var points := rotated_rectangle_points(start, end, _width)
		#var segment := (_segments.get_child(_segments.get_child_count() - 1) as Area2D)
		#var collision := (segment.get_child(0) as CollisionPolygon2D)
		#collision.set_polygon(points)
#
#func rotated_rectangle_points(start:Vector2, end:Vector2, width:float) -> Array:
		#var diff := end - start
		#var normal := diff.rotated(TAU/4).normalized()
		#var offset := normal * width * 0.5
		#return [start + offset, start - offset, end - offset, end + offset]
#
#func create_collision_polygon(points:Array) -> CollisionPolygon2D:
		#var result := CollisionPolygon2D.new()
		#result.set_polygon(points)
		#return result
#
#func total_purge() -> void:
		#purge(_points.size())
		#purge_loops()
#
#func purge(index:int) -> void:
		#var segments := _segments.get_children()
		#for _index in range(0, index):
				#if _points.size() > 0:
						#_points.remove_at(0)
				#if segments.size() > 0:
						#_segments.remove_child(segments[0])
						#segments[0].queue_free()
						#segments.remove_at(0)
#
		#_line.points = _points
#
#func purge_loops() -> void:
		#for loop in _loops.get_children():
				#if is_instance_valid(loop):
						#loop.queue_free()
#
#func process_loop() -> void:
		#var segments := _segments.get_children()
		#for index in range(segments.size() - 1, 0, -1):
				#var segment:Area2D = segments[index]
				#var candidates := segment.get_overlapping_areas()
				#for candidate in candidates:
						#var candidate_index := segments.find(candidate)
						#if candidate_index == -1:
								#continue
#
						#if abs(candidate_index - index) > 2:
								#push_loop(candidate_index, index)
								#purge(index)
								#return
#
#func push_loop(first_index:int, second_index:int) -> void:
		#purge_loops()
		#var loop := Area2D.new()
		#var points := _points
		#points.resize(second_index)
		#for point_index in first_index + 1:
				#points.remove_at(0)
#
		#var collision := create_collision_polygon(points)
		#loop.add_child(collision)
		#_loops.add_child(loop)
"

[sub_resource type="SpriteFrames" id="SpriteFrames_7ykds"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_8iscs"]
size = Vector2(53, 51)

[node name="test" type="Node2D"]
script = SubResource("GDScript_y32ns")

[node name="DeleteTool" parent="." instance=ExtResource("1_t4gsu")]
enabled = true

[node name="BaseComponent" type="Node2D" parent="."]
position = Vector2(299, 99)
script = ExtResource("3_qaqau")
can_delete = true

[node name="Sprite2D" type="Sprite2D" parent="BaseComponent"]
texture = ExtResource("4_4paqi")
centered = false

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="BaseComponent"]
sprite_frames = SubResource("SpriteFrames_7ykds")

[node name="DebugTools" type="Node" parent="BaseComponent"]

[node name="Label" type="Label" parent="BaseComponent/DebugTools"]
offset_left = 64.0
offset_right = 104.0
offset_bottom = 23.0

[node name="Area2D" type="Area2D" parent="BaseComponent"]

[node name="CollisionShape2D" type="CollisionShape2D" parent="BaseComponent/Area2D"]
position = Vector2(35.5, 40.5)
shape = SubResource("RectangleShape2D_8iscs")
